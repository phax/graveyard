/**
 * Copyright (C) 2014-2016 Philip Helger (www.helger.com)
 * philip[at]helger[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.helger.as4lib.model.pmode;

import com.helger.commons.collection.ext.CommonsArrayList;
import com.helger.commons.collection.ext.ICommonsList;
import com.helger.commons.state.ETriState;

public class PModeLegReliability
{
  /**
   * If "true", this Boolean parameter indicates that the "At-Least-Once"
   * reliability contract (see Section 8.2.2) is to be used between MSH and
   * Consumer (Guaranteed Delivery). It also indicates that this contract
   * applies to ebMS signals (see Section 8.2.1) (e.g. PullRequest) between the
   * receiving reliability module and the next MSH component (e.g. RM-Consumer).
   * <br/>
   */
  private final ETriState m_eAtLeastOnceContract = ETriState.UNDEFINED;
  /**
   * This Boolean parameter indicates the semantics of acknowledgments that are
   * generated by the reliability module. It is usually constrained by the
   * implementation and not set by users. For User messages: if "true", the
   * acknowledgment is only sent after the message has been delivered by the MSH
   * to the Consumer entity (see Case 2 in Section 8.2.4). If "false", the only
   * guarantee for the sender when receiving an acknowledgment is that the User
   * message has been well received (see Case 1 or 3 in Section 8.2.4), and made
   * available for further processing within the MSH. For Signal messages - e.g.
   * PullRequest: if "true", indicates that Signal messages are acknowledged
   * only if delivered (see Section 8.2.1) from the receiving reliability module
   * to the next MSH component (Case 3 in Section 8.2.4), i.e. to the
   * RM-Consumer (see 8.1.2). If "false", the message acknowledgment only
   * guarantees receipt of the signal (Case 1 in Section 8.2.4).
   */
  private final ETriState m_eAtLeastOnceAckOnDelivery = ETriState.UNDEFINED;

  /**
   * This parameter is a URI that specifies where acknowledgments are to be
   * sent. It may contain an anonymous URI (defined in WS-Addressing). If
   * absent, acknowledgments are to be sent to the same URI associated with the
   * MSH sending messages reliably.
   */
  private String m_sAtLeastOnceContractAcksTo;

  /**
   * This Boolean is true when an Acknowledgment must be sent, for a response
   * that is sent reliably.
   */
  private final ETriState m_eAtLeastOnceContractAckResponse = ETriState.UNDEFINED;

  /**
   * This parameter indicates whether a reliability acknowledgment is to be sent
   * as a callback, synchronously in the response (back-channel of underlying
   * protocol), or as response of separate ack pulling. Three values are
   * possible for this parameter, when using WS-Reliability: "Response",
   * "Callback", or "Poll".
   */
  private String m_eAtLeastOnceReplyPattern;

  /**
   * If "true", this Boolean parameter indicates that "At-Most-Once" (or
   * duplicate elimination) should be enforced when receiving a message. The
   * contract is for delivery between MSH and Consumer for User messages (see
   * Section 8.2.2), and between reliability module and next MSH component for
   * Signal messages (see Section 8.2.1).
   */
  private final ETriState m_eAtMostOnceContract = ETriState.UNDEFINED;

  /**
   * If "true", this Boolean parameter indicates that this message is part of an
   * ordered sequence. It only concerns User messages (delivery contract between
   * MSH and Consumer application, see Section 8.2.2).
   */
  private final ETriState m_eInOrderContract = ETriState.UNDEFINED;

  /**
   * This parameter is a Boolean that may be used to indicate if messages
   * matching this P-Mode must be associated with a new reliability group or
   * sequence. For example, a particular Service and Action may have the
   * application semantics of initiating a new ordered sequence of messages.
   */
  private final ETriState m_eStartGroup = ETriState.UNDEFINED;

  /**
   * This parameter tells how to correlate a message matching this P-Mode with
   * an existing reliability group or sequence. It is a comma-separated list of
   * XPath elements relative to the <code>eb:Messaging</code> header. Each one
   * of these XPaths identifies an element or attribute inside
   * <code>eb:UserMessage</code> or <code>eb:SignalMessage</code>, and may
   * include predicates. For example,
   * <code>"eb:UserMessage/eb:CollaborationInfo/eb:ConversationId,
   *  eb:UserMessage/eb:MessageProperties/eb:Property[@name=\"ProcessInstance\"]</code>
   * will correlate all messages that share the same <code>ConversationId</code>
   * and have the same value for the message property named
   * <code>ProcessInstance</code>. In case there is no ongoing group or sequence
   * associated with the values in Reliability.Correlation for a message under
   * this P-Mode, then a new group/sequence is started.
   */
  private final ICommonsList <String> m_aCorrelation = new CommonsArrayList<> ();

  /**
   * This parameter is a Boolean value that may be used to indicate if messages
   * matching this P-Mode must cause the closure of the reliability group or
   * sequence with which they correlate.
   */
  private final ETriState m_eTerminateGroup = ETriState.UNDEFINED;
}
